<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cola-life.github.io/"/>
  <updated>2018-05-05T13:32:00.343Z</updated>
  <id>http://cola-life.github.io/</id>
  
  <author>
    <name>cola</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django如何给上传的图片(或)重命名</title>
    <link href="http://cola-life.github.io/2018/05/05/djangorenameupfile/"/>
    <id>http://cola-life.github.io/2018/05/05/djangorenameupfile/</id>
    <published>2018-05-05T13:23:11.000Z</published>
    <updated>2018-05-05T13:32:00.343Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>先在你项目中添加一个文件夹如：system 在文件夹下添加<strong>init</strong>.py 和storage.py文件,并在storage.py中添加如下代码：</p><pre><code># -*- coding: UTF-8 -*-from django.core.files.storage import FileSystemStoragefrom django.http import HttpResponseclass ImageStorage(FileSystemStorage):    from django.conf import settings        def __init__(self, location=settings.MEDIA_ROOT, base_url=settings.MEDIA_URL):        # 初始化        super(ImageStorage, self).__init__(location, base_url)    # 重写 _save方法            def _save(self, name, content):        #name为上传文件名称        import os, time, random        # 文件扩展名        ext = os.path.splitext(name)[1]        # 文件目录        d = os.path.dirname(name)        # 定义文件名，年月日时分秒随机数        fn = time.strftime(&apos;%Y%m%d%H%M%S&apos;)        fn = fn + &apos;_%d&apos; % random.randint(0,100)        # 重写合成文件名        name = os.path.join(d, fn + ext)        # 调用父类方法        return super(ImageStorage, self)._save(name, content)</code></pre></li><li><p>在models.py文件中添加如下代码：</p><pre><code>from system.storage import ImageStoragepic=models.ImageField(upload_to=&apos;img/%Y/%m/%d&apos;,storage=ImageStorage())  #如果上传文件可以将ImageField换为FileField    </code></pre></li><li><p>这样就解决了问题，可以根据自己的需要来定义命名规则。</p></li></ol><p>原文出处：<a href="https://www.cnblogs.com/zhaoyingjie/p/6894979.html" title="django如何给上传的图片重命名(给上传文件重命名)  by 一天一点到" target="_blank" rel="noopener">https://www.cnblogs.com/zhaoyingjie/p/6894979.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;先在你项目中添加一个文件夹如：system 在文件夹下添加&lt;strong&gt;init&lt;/strong&gt;.py 和storage.py文件,并在storage.py中添加如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: UTF-8 -*-

      
    
    </summary>
    
      <category term="编程" scheme="http://cola-life.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Django" scheme="http://cola-life.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django ModelAdmin 设置只读</title>
    <link href="http://cola-life.github.io/2018/05/05/djangoadminreadonly/"/>
    <id>http://cola-life.github.io/2018/05/05/djangoadminreadonly/</id>
    <published>2018-05-05T04:21:54.000Z</published>
    <updated>2018-05-05T06:03:30.392Z</updated>
    
    <content type="html"><![CDATA[<p>在使用django的时候，ModelAdmin默认对于model的操作只有增加，修改和删除，但是总是有些字段是不希望用户来编辑的，使用下面的代码可以使ModelAdmin中让他显示为只读：<br><a id="more"></a><br><figure class="highlight python"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">ReadOnlyModelAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line"><span class="string">"""ModelAdmin class that prevents modifications through the admin.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   The changelist and the detail view work, but a 403 is returned</span></span><br><span class="line"><span class="string">   if one actually tries to edit an object.</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line"></span><br><span class="line">   actions = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">get_readonly_fields</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> self.fields <span class="keyword">or</span> [f.name <span class="keyword">for</span> f <span class="keyword">in</span> self.model._meta.fields]</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">has_add_permission</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># Allow viewing objects but not actually changing them</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">has_change_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> request.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">       <span class="keyword">return</span> super(ReadOnlyModelAdmin, self).has_change_permission(request, obj)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">has_delete_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>对于你要设置为只读的ModelAdmin，继承这个类：<br><figure class="highlight python"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAdmin</span><span class="params">(ReadOnlyModelAdmin)</span>:</span></span><br><span class="line">list_display = (<span class="string">''</span>,<span class="string">''</span>,)</span><br><span class="line">list_filter = (<span class="string">''</span>,)</span><br><span class="line">search_fields = (<span class="string">''</span>,)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>然后在admin中注册即可：<br><figure class="highlight stylus"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="selector-class">.site</span><span class="selector-class">.register</span>(Test,TestAdmin)</span><br></pre></td></tr></table></figure></p><p>文章来源：<a href="http://www.codeweblog.com/django-modeladmin-%E8%AE%BE%E7%BD%AE%E5%8F%AA%E8%AF%BB/" title="WebLog编程网志" target="_blank" rel="noopener">WebLog编程网志</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用django的时候，ModelAdmin默认对于model的操作只有增加，修改和删除，但是总是有些字段是不希望用户来编辑的，使用下面的代码可以使ModelAdmin中让他显示为只读：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://cola-life.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Django" scheme="http://cola-life.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>python string 处理</title>
    <link href="http://cola-life.github.io/2018/05/05/pythonstring/"/>
    <id>http://cola-life.github.io/2018/05/05/pythonstring/</id>
    <published>2018-05-05T01:57:47.000Z</published>
    <updated>2018-05-05T06:03:21.192Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>strip  lstrip rstrip</p><p> 字符串里有三个去空格的函数<br> strip 同时去掉左右两边的空格<br> lstrip 去掉左边的空格<br> rstrip 去掉右边的空格</p></li></ol><a id="more"></a><figure class="highlight ruby"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;a=<span class="string">" gho stwwl "</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;a.lstrip()</span><br><span class="line"><span class="string">'gho stwwl '</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;a.rstrip()</span><br><span class="line"><span class="string">' gho stwwl'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;a.strip()</span><br><span class="line"><span class="string">'gho stwwl'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;strip  lstrip rstrip&lt;/p&gt;
&lt;p&gt; 字符串里有三个去空格的函数&lt;br&gt; strip 同时去掉左右两边的空格&lt;br&gt; lstrip 去掉左边的空格&lt;br&gt; rstrip 去掉右边的空格&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程" scheme="http://cola-life.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://cola-life.github.io/tags/Python/"/>
    
      <category term="string" scheme="http://cola-life.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Django AdminModel user 对象</title>
    <link href="http://cola-life.github.io/2018/05/05/djangoadminmodeluser/"/>
    <id>http://cola-life.github.io/2018/05/05/djangoadminmodeluser/</id>
    <published>2018-05-05T01:48:41.000Z</published>
    <updated>2018-05-05T06:02:54.312Z</updated>
    
    <content type="html"><![CDATA[<p>User model</p><ol><li><p>Fields</p><p> class models.User<br> User objects have the following fields:</p><ul><li><p>username</p><p>  Required. 150 characters or fewer. Usernames may contain alphanumeric, _, @, +, . and - characters.<br>  The max_length should be sufficient for many use cases. If you need a longer length, please use a custom user model. If you use MySQL with the utf8mb4 encoding (recommended for proper Unicode support), specify at most max_length=191 because MySQL can only create unique indexes with 191 characters in that case by default.</p>  <a id="more"></a><blockquote><p>Usernames and Unicode<br>  Django originally accepted only ASCII letters and numbers in usernames. Although it wasn’t a deliberate choice, Unicode characters have always been accepted when using Python 3. Django 1.10 officially added Unicode support in usernames, keeping the ASCII-only behavior on Python 2, with the option to customize the behavior using User.username_validator.<br>  Changed in Django 1.10:<br>  The max_length increased from 30 to 150 characters.</p></blockquote></li><li><p>first_name</p><p>  Optional (blank=True). 30 characters or fewer.</p></li><li><p>last_name</p><p>  Optional (blank=True). 30 characters or fewer.</p></li><li><p>email</p><p>  Optional (blank=True). Email address.</p></li><li><p>password</p><p>  Required. A hash of, and metadata about, the password. (Django doesn’t store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the password documentation.</p></li><li><p>groups</p><p>  Many-to-many relationship to Group</p></li><li><p>user_permissions</p><p>  Many-to-many relationship to Permission</p></li><li><p>is_staff</p><p>  Boolean. Designates whether this user can access the admin site.</p></li><li><p>is_active</p><p>  Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to False instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won’t break.</p><blockquote><p>This doesn’t necessarily control whether or not the user can log in. Authentication backends aren’t required to check for the is_active flag but the default backend (ModelBackend) and the RemoteUserBackend do. You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to login. In this case, you’ll also want to customize the AuthenticationForm used by the LoginView as it rejects inactive users. Be aware that the permission-checking methods such as has_perm() and the authentication in the Django admin all return False for inactive users.<br>Changed in Django 1.10:<br>   In older versions, ModelBackend and RemoteUserBackend allowed inactive users to authenticate.</p></blockquote></li><li><p>is_superuser</p><p>  Boolean. Designates that this user has all permissions without explicitly assigning them.</p></li><li><p>last_login</p><p>  A datetime of the user’s last login.</p></li><li><p>date_joined</p><p>  A datetime designating when the account was created. Is set to the current date/time by default when the account is created.</p></li></ul></li><li><p>Attributes</p><p> class models.User</p><ul><li><p>is_authenticated</p><p>  Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn’t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance.</p><blockquote><p><strong>Changed in Django 1.10:</strong><br>In older versions, this was a method. Backwards-compatibility support for using it as a method will be removed in Django 2.0.<br><strong>Don’t use the is operator for comparisons!</strong><br>To allow the is_authenticated and is_anonymous attributes to also work as methods, the attributes are CallableBool objects. Thus, until the deprecation period ends in Django 2.0, you can’t compare these properties using the is operator. That is, request.user.is_authenticated is True always evaluate to False.</p></blockquote></li><li><p>is_anonymous</p><p>  Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute.</p><blockquote><p><strong>Changed in Django 1.10:</strong><br>In older versions, this was a method. Backwards-compatibility support for using it as a method will be removed in Django 2.0.</p></blockquote></li><li><p>username_validator</p><p>  New in Django 1.10.<br>  Points to a validator instance used to validate usernames. Defaults to validators.UnicodeUsernameValidator on Python 3 and validators.ASCIIUsernameValidator on Python 2.<br>  To change the default username validator, you can subclass the User model and set this attribute to a different validator instance. For example, to use ASCII usernames on Python 3:</p>  <pre><code>      from django.contrib.auth.models import User      from django.contrib.auth.validators import ASCIIUsernameValidator      class CustomUser(User):          username_validator = ASCIIUsernameValidator()          class Meta:              proxy = True  # If no new field is added.  </code></pre></li></ul></li><li><p><strong><em>Methods</em></strong></p><p> class <strong>models.User</strong></p><ul><li><p>get_username()</p><p>  Returns the username for the user. Since the User model can be swapped out, you should use this method instead of referencing the username attribute directly.</p></li><li><p>get_full_name()</p><p>  Returns the first_name plus the last_name, with a space in between.</p></li><li><p>get_short_name()</p><p>  Returns the first_name.</p></li><li><p>set_password(raw_password)</p><p>  Sets the user’s password to the given raw string, taking care of the password hashing. Doesn’t save the User object.<br>  When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used.</p></li><li><p>check_password(raw_password)</p><p>  Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)</p></li><li><p>set_unusable_password()</p><p>  Marks the user as having no password set. This isn’t the same as having a blank string for a password. check_password() for this user will never return True. Doesn’t save the User object.<br>  You may need this if authentication for your application takes place against an existing external source such as an LDAP directory.</p></li><li><p>has_usable_password()</p><p>  Returns False if set_unusable_password() has been called for this user.</p></li><li><p>get_group_permissions(obj=None)</p><p>  Returns a set of permission strings that the user has, through their groups.<br>  If obj is passed in, only returns the group permissions for this specific object.</p></li><li><p>get_all_permissions(obj=None)</p><p>  Returns a set of permission strings that the user has, both through group and user permissions.</p><p>  If obj is passed in, only returns the permissions for this specific object.</p></li><li><p>has_perm(perm, obj=None)</p><p>  Returns True if the user has the specified permission, where perm is in the format “<app label="">.<permission codename="">“. (see documentation on permissions). If the user is inactive, this method will always return False.<br>  If obj is passed in, this method won’t check for a permission for the model, but for this specific object.</permission></app></p></li><li><p>has_perms(perm_list, obj=None)</p><p>  Returns True if the user has each of the specified permissions, where each perm is in the format “<app label="">.<permission codename="">“. If the user is inactive, this method will always return False.<br>  If obj is passed in, this method won’t check for permissions for the model, but for the specific object.</permission></app></p></li><li><p>has_module_perms(package_name)</p><p>  Returns True if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return False.</p></li><li><p>email_user(subject, message, from_email=None, **kwargs)</p><p>  Sends an email to the user. If from_email is None, Django uses the DEFAULT_FROM_EMAIL. Any **kwargs are passed to the underlying send_mail() call.</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;User model&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Fields&lt;/p&gt;
&lt;p&gt; class models.User&lt;br&gt; User objects have the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;username&lt;/p&gt;
&lt;p&gt;  Required. 150 characters or fewer. Usernames may contain alphanumeric, _, @, +, . and - characters.&lt;br&gt;  The max_length should be sufficient for many use cases. If you need a longer length, please use a custom user model. If you use MySQL with the utf8mb4 encoding (recommended for proper Unicode support), specify at most max_length=191 because MySQL can only create unique indexes with 191 characters in that case by default.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="编程" scheme="http://cola-life.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Django" scheme="http://cola-life.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django admin 备忘</title>
    <link href="http://cola-life.github.io/2018/05/04/20180504djanoadminsave/"/>
    <id>http://cola-life.github.io/2018/05/04/20180504djanoadminsave/</id>
    <published>2018-05-04T13:38:16.000Z</published>
    <updated>2018-05-05T06:47:27.282Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>数据保存时自定义操作</p><p> 使用Django框架中的admin可以非常方便地实现常用的管理功能，但有时在通过Admin添加数据时，希望在数据保存时进行一些额外的操作，这可以通过重写ModelAdmin的save_model实现。</p><pre><code>from django.contrib import adminclass ArticleAdmin(admin.ModelAdmin):    def save_model(self, request, obj, form, change):        # 自定义操作        obj.save()</code></pre><p> 通过使用ModelAdmin中的其它方法，可以对admin的其它功能进行更多的控制。</p><p> 详见 <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.save_model" title="[https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.save_model]" target="_blank" rel="noopener">Django文档</a></p></li><li><p>设置字段的默认值</p><p> 覆盖formfield_for_dbfield方法</p><pre><code>class MAdmin(admin.ModelAdmin):    def formfield_for_dbfield(self, db_field, **kwargs):        field =  super(MAdmin, self).formfield_for_dbfield(db_field, **kwargs)        if db_field.name == &apos;description&apos;:            field.initial = &apos;My initial description&apos;        return field</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据保存时自定义操作&lt;/p&gt;
&lt;p&gt; 使用Django框架中的admin可以非常方便地实现常用的管理功能，但有时在通过Admin添加数据时，希望在数据保存时进行一些额外的操作，这可以通过重写ModelAdmin的save_model实现。&lt;/p&gt;
&lt;pre
      
    
    </summary>
    
      <category term="编程" scheme="http://cola-life.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Django" scheme="http://cola-life.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cola-life.github.io/2018/05/04/hello-world/"/>
    <id>http://cola-life.github.io/2018/05/04/hello-world/</id>
    <published>2018-05-04T11:38:09.722Z</published>
    <updated>2018-05-04T11:38:09.722Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
